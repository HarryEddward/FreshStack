name: Apply Docker Swarm Secrets to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Manage SSL Secrets on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          envs: SSL_CERT,SSL_KEY
          script: |
            set -e

            # Directorio temporal para certificados
            TEMP_DIR="/tmp/certs"
            mkdir -p "$TEMP_DIR"

            # Guardar certificados y clave desde variables de entorno
            echo "$SSL_CERT" > "$TEMP_DIR/fullchain.crt"
            echo "$SSL_KEY" > "$TEMP_DIR/cafebuy.key"

            # Función para calcular hash de un archivo
            compute_hash() {
              sha256sum "$1" | cut -d' ' -f1
            }

            # Función para obtener hash de un secreto existente
            get_secret_hash() {
              local secret_name="$1"
              local temp_file="$TEMP_DIR/$secret_name.current"
              if docker secret inspect "$secret_name" > /dev/null 2>&1; then
                docker secret inspect "$secret_name" | jq -r '.Spec.Data' | base64 -d > "$temp_file"
                compute_hash "$temp_file"
              else
                echo ""
              fi
            }

            # Calcular hashes de los nuevos certificados
            NEW_CERT_HASH=$(compute_hash "$TEMP_DIR/fullchain.crt")
            NEW_KEY_HASH=$(compute_hash "$TEMP_DIR/cafebuy.key")

            # Verificar y actualizar ssl_cert
            CURRENT_CERT_HASH=$(get_secret_hash "ssl_cert")
            if [ -z "$CURRENT_CERT_HASH" ]; then
              echo "Creando secreto ssl_cert..."
              docker secret create ssl_cert "$TEMP_DIR/fullchain.crt"
              echo "Secreto ssl_cert creado."
            elif [ "$NEW_CERT_HASH" != "$CURRENT_CERT_HASH" ]; then
              echo "Actualizando secreto ssl_cert..."
              docker secret rm ssl_cert
              docker secret create ssl_cert "$TEMP_DIR/fullchain.crt"
              echo "Secreto ssl_cert actualizado."
            else
              echo "Secreto ssl_cert sin cambios, omitiendo."
            fi

            # Verificar y actualizar ssl_key
            CURRENT_KEY_HASH=$(get_secret_hash "ssl_key")
            if [ -z "$CURRENT_KEY_HASH" ]; then
              echo "Creando secreto ssl_key..."
              docker secret create ssl_key "$TEMP_DIR/cafebuy.key"
              echo "Secreto ssl_key creado."
            elif [ "$NEW_KEY_HASH" != "$CURRENT_KEY_HASH" ]; then
              echo "Actualizando secreto ssl_key..."
              docker secret rm ssl_key
              docker secret create ssl_key "$TEMP_DIR/cafebuy.key"
              echo "Secreto ssl_key actualizado."
            else
              echo "Secreto ssl_key sin cambios, omitiendo."
            fi

            # Limpiar archivos temporales
            rm -rf "$TEMP_DIR"
            echo "Completado: $(date)"