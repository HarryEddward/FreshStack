name: Apply Docker Swarm Secrets to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    if: true
    runs-on: ubuntu-latest
    steps:
      - name: Apply secrets to Swarm
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          env:
            SSL_CERT: ${{ secrets.SSL_CERT }}
            SSL_KEY: ${{ secrets.SSL_KEY }}
            FRESH_SESSION_SECRET: ${{ secrets.FRESH_SESSION_SECRET }}
            JENKINS_SECRET_KEY: ${{ secrets.JENKINS_SECRET_KEY }}
            KEYCLOAK_CLIENT_BACKEND_SERVER_SECRET: ${{ secrets.KEYCLOAK_CLIENT_BACKEND_SERVER_SECRET }}
            POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
            POSTGRESQL_USERNAME: ${{ secrets.POSTGRESQL_USERNAME }}
            SEAWEEDFS_S3_ACCESS_KEY: ${{ secrets.SEAWEEDFS_S3_ACCESS_KEY }}
            SEAWEEDFS_S3_SECRET_KEY: ${{ secrets.SEAWEEDFS_S3_SECRET_KEY }}
            STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          script: |
            set -e

            echo "üì• Actualizando secretos en Docker Swarm..."

            declare -A secrets=(
              [SSL_CERT]=ssl_cert
              [SSL_KEY]=ssl_key
              [FRESH_SESSION_SECRET]=fresh_session_secret
              [JENKINS_SECRET_KEY]=jenkins_secret_key
              [KEYCLOAK_CLIENT_BACKEND_SERVER_SECRET]=keycloak_client_backend_server_secret
              [POSTGRESQL_PASSWORD]=postgresql_password
              [POSTGRESQL_USERNAME]=postgresql_username
              [SEAWEEDFS_S3_ACCESS_KEY]=seaweedfs_s3_access_key
              [SEAWEEDFS_S3_SECRET_KEY]=seaweedfs_s3_secret_key
              [STRIPE_PUBLISHABLE_KEY]=stripe_publishable_key
              [STRIPE_SECRET_KEY]=stripe_secret_key
            )

            # Actualizar secretos
            for gh_secret in "${!secrets[@]}"; do
              swarm_secret="${secrets[$gh_secret]}"
              echo "üîê Procesando secreto: $swarm_secret"

              sudo docker secret rm "$swarm_secret" || true

              retries=10
              while sudo docker secret ls --format '{{.Name}}' | grep -q "^$swarm_secret$"; do
                echo "‚è≥ Esperando a que se elimine $swarm_secret..."
                sleep 2
                retries=$((retries-1))
                if [ $retries -le 0 ]; then
                  echo "‚ùå Timeout: el secreto $swarm_secret no se pudo eliminar"
                  exit 1
                fi
              done

              echo "${!gh_secret}" | sudo docker secret create "$swarm_secret" -
              echo "‚úÖ Secreto actualizado: $swarm_secret"
            done

            echo "üöÄ Reiniciando stacks para aplicar los nuevos secretos..."

            # Map de stacks a docker-compose.yml
            declare -A stacks_compose=(
              [traefik]="/home/ubuntu/FreshStack/traefik/docker-compose.yml"
              [postgresql]="/home/ubuntu/FreshStack/postgresql/docker-compose.yml"
            )

            for stack in "${!stacks_compose[@]}"; do
              echo "üõë Eliminando stack $stack..."
              sudo docker stack rm "$stack"

              while sudo docker stack ls --format '{{.Name}}' | grep -q "^$stack$"; do
                echo "‚è≥ Esperando a que $stack desaparezca..."
                sleep 3
              done

              echo "üöÄ Desplegando stack $stack..."
              sudo docker stack deploy -c "${stacks_compose[$stack]}" "$stack"
              echo "‚úÖ Stack $stack desplegado"
            done

            echo "‚úÖ Todos los stacks actualizados y levantados"
