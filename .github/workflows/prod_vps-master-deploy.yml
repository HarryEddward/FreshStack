name: Deploy to VPS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  PROJECT_PATH: /home/ubuntu/FreshStack
  REPO_URL: https://github.com/${{ github.repository }}.git

jobs:
  # Job 1: Actualizar repositorio en el VPS
  sync-repository:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sync repository to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          envs: PROJECT_PATH,REPO_URL
          script: |
            set -e
            echo "==> Sincronizando repositorio..."
            if [ ! -d "$PROJECT_PATH" ]; then
              echo "📁 Directorio no existe. Clonando repositorio..."
              mkdir -p "$(dirname "$PROJECT_PATH")"
              git clone "$REPO_URL" "$PROJECT_PATH"
            else
              echo "📂 Directorio existe. Actualizando..."
              cd "$PROJECT_PATH"
              if [ ! -d ".git" ]; then
                cd ..
                rm -rf "$PROJECT_PATH"
                git clone "$REPO_URL" "$PROJECT_PATH"
              else
                git stash push -m "Auto-backup $(date)" --include-untracked || true
                git fetch origin
                git reset --hard origin/main
                git clean -fd
              fi
            fi
            echo "✅ Repositorio sincronizado en $PROJECT_PATH"

  # Job 2: Remover stacks existentes
  remove-stacks:
    if: false
    runs-on: ubuntu-latest
    needs: sync-repository
    steps:
      - name: Remove Docker Swarm stacks
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            STACKS=("traefik" "postgresql" "seaweedfs")
            for stack_name in "${STACKS[@]}"; do
              echo "Removing stack: ${stack_name}"
              sudo docker stack rm "${stack_name}" 2>/dev/null || true
              while sudo docker stack ls --format '{{.Name}}' | grep -q "^${stack_name}$"; do
                sleep 3
              done
            done
            echo "✅ Stacks removidos correctamente"

  # Job 3: Actualizar secretos
  update-secrets:
    if: false
    runs-on: ubuntu-latest
    needs: remove-stacks
    steps:
      - name: Update Docker Swarm secrets
        uses: appleboy/ssh-action@v1.0.3
        env:
          SSL_CERT: ${{ secrets.SSL_CERT }}
          SSL_KEY: ${{ secrets.SSL_KEY }}
          FRESH_SESSION_SECRET: ${{ secrets.FRESH_SESSION_SECRET }}
          JENKINS_SECRET_KEY: ${{ secrets.JENKINS_SECRET_KEY }}
          KEYCLOAK_CLIENT_BACKEND_SERVER_SECRET: ${{ secrets.KEYCLOAK_CLIENT_BACKEND_SERVER_SECRET }}
          POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
          POSTGRESQL_USERNAME: ${{ secrets.POSTGRESQL_USERNAME }}
          SEAWEEDFS_S3_ACCESS_KEY: ${{ secrets.SEAWEEDFS_S3_ACCESS_KEY }}
          SEAWEEDFS_S3_SECRET_KEY: ${{ secrets.SEAWEEDFS_S3_SECRET_KEY }}
          SEAWEEDFS_S3_USERNAME: ${{ secrets.SEAWEEDFS_S3_USERNAME }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          envs: SSL_CERT,SSL_KEY,FRESH_SESSION_SECRET,JENKINS_SECRET_KEY,KEYCLOAK_CLIENT_BACKEND_SERVER_SECRET,POSTGRESQL_PASSWORD,POSTGRESQL_USERNAME,SEAWEEDFS_S3_ACCESS_KEY,SEAWEEDFS_S3_SECRET_KEY,SEAWEEDFS_S3_USERNAME,STRIPE_PUBLISHABLE_KEY,STRIPE_SECRET_KEY
          script: |
            set -e
            declare -A SECRETS=(
              [SSL_CERT]=$SSL_CERT
              [SSL_KEY]=$SSL_KEY
              [FRESH_SESSION_SECRET]=$FRESH_SESSION_SECRET
              [JENKINS_SECRET_KEY]=$JENKINS_SECRET_KEY
              [KEYCLOAK_CLIENT_BACKEND_SERVER_SECRET]=$KEYCLOAK_CLIENT_BACKEND_SERVER_SECRET
              [POSTGRESQL_PASSWORD]=$POSTGRESQL_PASSWORD
              [POSTGRESQL_USERNAME]=$POSTGRESQL_USERNAME
              [SEAWEEDFS_S3_ACCESS_KEY]=$SEAWEEDFS_S3_ACCESS_KEY
              [SEAWEEDFS_S3_SECRET_KEY]=$SEAWEEDFS_S3_SECRET_KEY
              [SEAWEEDFS_S3_USERNAME]=$SEAWEEDFS_S3_USERNAME
              [STRIPE_PUBLISHABLE_KEY]=$STRIPE_PUBLISHABLE_KEY
              [STRIPE_SECRET_KEY]=$STRIPE_SECRET_KEY
            )
            for swarm_name in "${!SECRETS[@]}"; do
              sudo docker secret rm "${swarm_name,,}" 2>/dev/null || true
              echo "${SECRETS[$swarm_name]}" | sudo docker secret create "${swarm_name,,}" -
            done
            echo "✅ Secrets actualizados"

  # Job 4: Actualizar configs de Swarm
  update-configs:
    if: false
    runs-on: ubuntu-latest
    needs: update-secrets
    steps:
      - name: Apply Docker Swarm Configs
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            echo "==> Limpiando configs antiguas de s3_conf..."
            for config in $(sudo docker config ls --format '{{.Name}}' | grep '^s3_conf_'); do
              sudo docker config rm "$config" 2>/dev/null || true
            done
            echo "==> Limpiando configs antiguas de tls_conf..."
            for config in $(sudo docker config ls --format '{{.Name}}' | grep '^tls_conf_'); do
              sudo docker config rm "$config" 2>/dev/null || true
            done
            echo "==> Aplicando configs de Docker Swarm..."
            CONFIGS=(
              "tls_conf:/home/ubuntu/FreshStack/traefik/dynamic/tls.yaml"
              "s3_conf:/home/ubuntu/FreshStack/seaweedfs/s3.json.template"
            )
            for entry in "${CONFIGS[@]}"; do
              IFS=":" read -r config_name file_path <<< "$entry"
              if [ ! -f "$file_path" ]; then
                echo "⚠️ No se encontró $file_path, omitiendo..."
                continue
              fi
              sudo docker config rm "$config_name" 2>/dev/null || true
              sudo docker config create "$config_name" "$file_path"
            done
            echo "✅ Configs actualizados"

  # Job 5: Redesplegar servicios
  deploy-services:
    if: false
    runs-on: ubuntu-latest
    needs: update-configs
    steps:
      - name: Deploy Docker Swarm stacks
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            STACKS=(
              "traefik:/home/ubuntu/FreshStack/traefik/docker-compose.yml"
              "postgresql:/home/ubuntu/FreshStack/postgresql/docker-compose.yml"
              "seaweedfs:/home/ubuntu/FreshStack/seaweedfs/docker-compose.yml"
            )
            for stack in "${STACKS[@]}"; do
              stack_name="${stack%%:*}"
              compose_file="${stack##*:}"
              sudo docker stack deploy -c "${compose_file}" "${stack_name}"
              sleep 2
            done
            echo "✅ Servicios desplegados con éxito"
