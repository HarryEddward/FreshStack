name: Deploy to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Permite ejecutar manualmente

env:
  PROJECT_PATH: /home/ubuntu/FreshStack
  REPO_URL: https://github.com/${{ github.repository }}.git

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sync repository to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          envs: PROJECT_PATH,REPO_URL
          script: |
            set -e  # Salir si hay alg√∫n error
            
            echo "üöÄ Sincronizando repositorio..."
            
            # Verificar si el directorio del proyecto existe
            if [ ! -d "$PROJECT_PATH" ]; then
              echo "üìÅ Directorio no existe. Clonando repositorio..."
              
              # Crear directorio padre si no existe
              mkdir -p "$(dirname "$PROJECT_PATH")"
              
              # Clonar el repositorio
              git clone "$REPO_URL" "$PROJECT_PATH"
              
              echo "‚úÖ Repositorio clonado en $PROJECT_PATH"
            else
              echo "üìÇ Directorio existe. Actualizando..."
              
              cd "$PROJECT_PATH"
              
              # Verificar si es un repositorio git v√°lido
              if [ ! -d ".git" ]; then
                echo "‚ùå No es un repositorio git v√°lido"
                echo "üîÑ Eliminando y clonando de nuevo..."
                cd ..
                rm -rf "$PROJECT_PATH"
                git clone "$REPO_URL" "$PROJECT_PATH"
                echo "‚úÖ Repositorio clonado nuevamente"
              else
                echo "üîÑ Descargando cambios..."
                
                # Guardar cambios locales temporalmente
                git stash push -m "Auto-backup $(date)" --include-untracked || true
                
                # Obtener cambios del remoto
                git fetch origin
                
                # Actualizar a la √∫ltima versi√≥n
                git reset --hard origin/main
                
                # Limpiar archivos no deseados
                git clean -fd
                
                echo "‚úÖ Repositorio actualizado"
              fi
            fi
            
            echo "üìç Archivos sincronizados en: $PROJECT_PATH"
            echo "‚è∞ Completado: $(date)"