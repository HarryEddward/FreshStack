//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum LicenseType {
  MONTHLY
  LIFETIME
}

enum LicensePlan {
  STANDARD
  PREMIUM
  ENTERPRISE
  CUSTOM
}

enum LicenseStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
  REFUNDED
}

enum TransactionStatus {
  SUCCESSFUL
  FAILED
  PENDING
}

enum TypeBusinessOrderUbication {
  PHONE
  STATIC
}

enum PaymentMethod {
  DEBIT_CARD
  CREDIT_CARD
  CASH
  OTHER
}

enum FileType {
  WEBP
  PDF
}

enum PriceAdjustmentType {
  INCREASE
  DECREASE
}

enum EmployeeType {
  ALL
  WAITER
  CHEF
}

enum CESTTimeZone {
  EUROPE_AMSTERDAM
  EUROPE_ANDORRA
  EUROPE_BELGRADE
  EUROPE_BERLIN
  EUROPE_BRATISLAVA
  EUROPE_BRUSSELS
  EUROPE_BUDAPEST
  EUROPE_COPENHAGEN
  EUROPE_GIBRALTAR
  EUROPE_LISBON
  EUROPE_LJUBLJANA
  EUROPE_LUXEMBOURG
  EUROPE_MADRID
  EUROPE_MALTA
  EUROPE_MONACO
  EUROPE_OSLO
  EUROPE_PARIS
  EUROPE_PODGORICA
  EUROPE_PRAGUE
  EUROPE_ROME
  EUROPE_SAN_MARINO
  EUROPE_SARAJEVO
  EUROPE_SKOPJE
  EUROPE_STOCKHOLM
  EUROPE_TIRANE
  EUROPE_VADUZ
  EUROPE_VIENNA
  EUROPE_WARSAW
  EUROPE_ZAGREB
  EUROPE_ZURICH
  AFRICA_CEUTA
  AFRICA_TUNIS
  ARCTIC_LONGYEARBYEN
}

enum BatchStatus {
  AVAILABLE
  RESERVED
  EXPIRED
  CONSUMED
  DAMAGED
}

enum StockMovementType {
  PURCHASE
  SALE
  ADJUSTMENT
  EXPIRED
  DAMAGED
  RESERVED
  UNRESERVED
  TRANSFER
}

enum BusinessProductType {
  INTERNAL
  INDIRECT
  DIRECT
}

enum TypeBusinessProductStockGroupMovement {
  CONSUMER
  WAREHOUSE
}

enum ProviderPaymentGateway {
  STRIPE
  SUMUP
}

model Business {
  id                              String                                   @id() @default(cuid())
  legalName                       String
  taxId                           String                                   @unique()
  phone                           String                                   @unique()
  email                           String                                   @unique()
  registeredAddress               String
  countryOfIncorporation          String
  legalForm                       String
  legalRepresentative             Json
  createdAt                       DateTime                                 @default(now())
  updatedAt                       DateTime                                 @updatedAt()
  supportingDocuments             BusinessSupportingDocuments?
  supportingDocumentsAttached     BusinessSupportingDocumentAttached[]
  commercialRelationship          BusinessCommercialRelationship?
  compliance                      BusinessCompliance?
  configuration                   BusinessConfiguration?
  bankInformation                 BusinessBankInformation?
  paymentHistoryDetails           BusinessPaymentHistoryDetail[]
  paymentHistories                BusinessPaymentHistory[]
  licenses                        BusinessLicense[]
  payingCompany                   BusinessPayingCompany?
  orderUbications                 BusinessOrderUbication[]
  clientOrders                    ClientOrder[]
  suppliers                       BusinessSupplier[]
  supplierInformation             BusinessSupplierInformation[]
  menus                           BusinessMenu[]
  products                        BusinessProduct[]
  productStockBatches             BusinessProductStockBatch[]
  productStockMovments            BusinessProductStockMovement[]
  generalSalesReportsAi           BusinessGeneralSalesReportAi[]
  generalWarehouseReportsAi       BusinessGeneralWarehouseReportAi[]
  warehouseReplenishmentReportsAi BusinessWarehouseReplenishmentReportAi[]
  clientOrderProducts             ClientOrderProductLine[]
  clientOrderThermalPrinters      ClientOrderThermalPrinter[]
  clientOrderTickets              ClientOrderTicket[]
  clientOrderTransactions         ClientOrderTransaction[]
  menuCategories                  BusinessMenuCategory[]
  employees                       BusinessEmployee[]
  employeeClockRecords            BusinessEmployeeClockRecord[]            @relation("BusinessToClockRecords")
  productGroups                   BusinessProductGroup[]
  productGroupPriceAdjustments    BusinessProductGroupPriceAdjustment[]
  menuCategoryPriceAdjustments    BusinessMenuCategoryPriceAdjustment[]
  menuPriceAdjustment             BusinessMenuPriceAdjustment[]
  dailyCashBalances               BusinessDailyCashBalance[]
  users                           User[]
  clientTempOrders                ClientTempOrder[]
  files                           BusinessFile[]
  paymentGateway                  BusinessPaymentGateway[]
  productStockGroupMovement       BusinessProductStockGroupMovement[]

  @@map("businesses")
}

model User {
  id         String   @id() @default(cuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
}

model BusinessDailyCashBalance {
  id                  String           @id() @default(cuid())
  businessId          String
  employeeId          String
  balanceDate         DateTime         @db.Date()
  expectedCashAmount  Float            @default(0)
  expectedCardAmount  Float            @default(0)
  expectedOtherAmount Float            @default(0)
  totalExpectedAmount Float            @default(0)
  countedCashAmount   Float
  countedCardAmount   Float
  countedOtherAmount  Float
  totalCountedAmount  Float
  varianceCash        Float
  varianceCard        Float
  varianceOther       Float
  totalVariance       Float
  notes               String?
  isBalanced          Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt()
  business            Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  employee            BusinessEmployee @relation(fields: [employeeId], references: [id])

  @@unique([businessId, balanceDate])
  @@index([businessId])
  @@index([employeeId])
  @@index([balanceDate])
  @@map("business_daily_cash_balances")
}

model BusinessSupportingDocuments {
  id                                 String   @id()
  serviceContract                    Boolean?
  issuedInvoice                      Boolean?
  thirdPartyPaymentAgreement         Boolean?
  ultimateBeneficialOwnerCertificate Boolean?
  businessLicense                    Boolean?
  createdAt                          DateTime @default(now())
  updatedAt                          DateTime @updatedAt()
  business                           Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("business_supporting_documents")
}

model BusinessSupportingDocumentAttached {
  id         String   @id() @default(cuid())
  url        String
  businessId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("business_supporting_documents_attached")
}

model BusinessCommercialRelationship {
  id                          String                                           @id()
  type                        String
  signedContract              Boolean?
  thirdPartyPaymentPermission Boolean?
  createdAt                   DateTime                                         @default(now())
  updatedAt                   DateTime                                         @updatedAt()
  business                    Business                                         @relation(fields: [id], references: [id], onDelete: Cascade)
  attachedDocuments           BusinessCommercialRelationshipDocumentAttached[]

  @@map("business_commercial_relationships")
}

model BusinessCommercialRelationshipDocumentAttached {
  id                       String                         @id() @default(cuid())
  url                      String
  commercialRelationshipId String
  createdAt                DateTime                       @default(now())
  updatedAt                DateTime                       @updatedAt()
  commercialRelationship   BusinessCommercialRelationship @relation(fields: [commercialRelationshipId], references: [id], onDelete: Cascade)

  @@index([commercialRelationshipId])
  @@map("business_commercial_relationship_documents_attached")
}

model BusinessCompliance {
  id                       String   @id()
  kycVerified              Boolean?
  amlApproved              Boolean?
  taxWithholdingApplicable Boolean?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt()
  business                 Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("business_compliance")
}

model BusinessConfiguration {
  id                 String       @id()
  wifi               Json?
  schedule           Json?
  timeZone           CESTTimeZone @default(EUROPE_MADRID)
  functionsActivated Json?
  apiKey             Json?
  affiliate          Boolean?     @default(false)
  maxPhonesDevices   Int?         @default(30)
  displayUsername    String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt()
  business           Business     @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("business_configurations")
}

model BusinessBankInformation {
  id                  String   @id()
  bankName            String
  ibanOrAccountNumber String
  swiftBic            String?
  accountHolderName   String
  bankAddress         String?
  currency            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt()
  business            Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("business_bank_information")
}

model BusinessPaymentHistoryDetail {
  id             String                   @id() @default(cuid())
  description    String
  amount         Float
  currency       String
  taxesIncluded  Boolean?
  periodStart    DateTime?
  periodEnd      DateTime?
  businessId     String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt()
  business       Business                 @relation(fields: [businessId], references: [id])
  paymentHistory BusinessPaymentHistory[]

  @@index([businessId])
  @@map("business_payment_history_details")
}

model BusinessPaymentHistory {
  id              String                       @id() @default(cuid())
  businessId      String
  paymentDetailId String
  amount          Float
  currency        String
  type            String
  status          String
  stripeInvoiceId String?
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt()
  business        Business                     @relation(fields: [businessId], references: [id])
  paymentDetail   BusinessPaymentHistoryDetail @relation(fields: [paymentDetailId], references: [id])

  @@unique([businessId, paymentDetailId, createdAt], map: "business_payment_history_unique_idx")
  @@index([businessId])
  @@index([paymentDetailId])
  @@map("business_payment_history")
}

model BusinessLicense {
  id                    String        @id() @default(cuid())
  stripeCustomerId      String?
  stripeSubscriptionId  String?       @unique()
  stripePaymentIntentId String?       @unique()
  licenseType           LicenseType
  plan                  LicensePlan
  status                LicenseStatus
  startDate             DateTime
  endDate               DateTime?
  isPaid                Boolean       @default(false)
  lockinMonths          Int?
  businessId            String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt()
  business              Business      @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@index([stripeSubscriptionId])
  @@index([stripePaymentIntentId])
  @@map("business_licenses")
}

model BusinessPayingCompany {
  id        String   @id()
  legalName String
  taxId     String   @unique()
  country   String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  business  Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("business_paying_companies")
}

model ClientOrder {
  id               String                     @id() @default(cuid())
  status           OrderStatus                @default(PENDING)
  informationNotes String?
  tableServed      String?
  employeeServed   String?
  refund           Boolean                    @default(false)
  businessId       String
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt()
  business         Business                   @relation(fields: [businessId], references: [id])
  products         ClientOrderProductLine[]
  thermalPrinter   ClientOrderThermalPrinter?
  ticket           ClientOrderTicket?
  transactions     ClientOrderTransaction[]

  @@index([businessId])
  @@index([status])
  @@map("client_orders")
}

model ClientTempOrderLine {
  id                 String          @id() @default(cuid())
  quantity           Int
  priceAtTimeOfOrder Float
  orderId            String
  productId          String
  order              ClientTempOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            BusinessProduct @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
  @@map("client_temp_order_lines")
}

model ClientTempOrder {
  id                       String                  @id() @default(cuid())
  businessId               String
  phoneId                  String                  @unique()
  email                    String?
  createdAt                DateTime                @default(now())
  business                 Business                @relation(fields: [businessId], references: [id], onDelete: Cascade)
  lines                    ClientTempOrderLine[]
  businessOrderUbicationId String?                 @unique()
  businessOrderUbication   BusinessOrderUbication? @relation(fields: [businessOrderUbicationId], references: [id], onDelete: SetNull)

  @@index([businessId])
  @@index([createdAt])
  @@map("client_temp_orders")
}

model BusinessOrderUbication {
  id                String                     @id() @default(cuid())
  title             String
  position_x        Decimal
  position_y        Decimal
  isCalling         Boolean                    @default(false)
  type              TypeBusinessOrderUbication @default(PHONE)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt()
  businessId        String
  business          Business                   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  clientTempOrderId String?                    @unique()
  clientTempOrder   ClientTempOrder?           @relation()

  @@index([businessId])
  @@index([isCalling])
  @@map("business_order_ubications")
}

model ClientOrderProductLine {
  id              String      @id() @default(cuid())
  orderId         String
  productSnapshot Json
  quantity        Int
  subtotal        Float
  businessId      String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt()
  order           ClientOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  business        Business    @relation(fields: [businessId], references: [id])

  @@index([orderId])
  @@index([businessId])
  @@map("client_order_product_lines")
}

model ClientOrderThermalPrinter {
  orderId    String      @id()
  printers   String[]
  businessId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  order      ClientOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  business   Business    @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@map("client_order_thermal_printers")
}

model ClientOrderTicket {
  orderId    String      @id()
  tickets    Json
  businessId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  order      ClientOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  business   Business    @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@map("client_order_tickets")
}

model ClientOrderTransaction {
  id                     String            @id() @default(cuid())
  orderId                String
  externalTransactionId  String            @unique()
  transactionAmount      Float
  transactionCurrencyIso String
  status                 TransactionStatus
  paymentMethod          PaymentMethod?
  businessId             String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt()
  order                  ClientOrder       @relation(fields: [orderId], references: [id])
  business               Business          @relation(fields: [businessId], references: [id])

  @@index([orderId])
  @@index([businessId])
  @@index([status])
  @@map("client_order_transactions")
}

model BusinessSupplierInformation {
  id          String        @id() @default(cuid())
  inUse       Boolean       @default(true)
  title       String
  description String?
  schedule    Json?
  businessId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  business    Business      @relation(fields: [businessId], references: [id])
  imageId     String?       @unique()
  image       BusinessFile? @relation(fields: [imageId], references: [id], onDelete: SetNull)

  @@index([businessId])
  @@index([imageId])
  @@map("business_supplier_information")
}

model BusinessMenu {
  id                           String                        @id() @default(cuid())
  title                        String
  tags                         String?
  nameLastModificationEmployee String?
  vip                          Boolean                       @default(false)
  haveSchedule                 Boolean                       @default(false)
  schedule                     Json?
  businessId                   String
  categoryId                   String?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt()
  business                     Business                      @relation(fields: [businessId], references: [id])
  category                     BusinessMenuCategory?         @relation(fields: [categoryId], references: [id])
  products                     BusinessProduct[]
  priceAdjustments             BusinessMenuPriceAdjustment[]

  @@index([businessId])
  @@index([categoryId])
  @@map("business_menus")
}

model BusinessMenuPriceAdjustment {
  id                    String              @id() @default(cuid())
  menuId                String
  adjustmentType        PriceAdjustmentType
  percentageValue       Float
  description           String?
  appliedAt             DateTime?
  appliedByEmployeeName String?
  businessId            String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt()
  menu                  BusinessMenu        @relation(fields: [menuId], references: [id], onDelete: Cascade)
  business              Business            @relation(fields: [businessId], references: [id])

  @@index([menuId])
  @@index([businessId])
  @@map("business_menu_price_adjustments")
}

model BusinessMenuCategory {
  id               String                                @id() @default(cuid())
  businessId       String
  createdAt        DateTime                              @default(now())
  updatedAt        DateTime                              @updatedAt()
  menus            BusinessMenu[]
  business         Business                              @relation(fields: [businessId], references: [id])
  priceAdjustments BusinessMenuCategoryPriceAdjustment[]

  @@index([businessId])
  @@map("business_menu_categories")
}

model BusinessMenuCategoryPriceAdjustment {
  id                    String               @id() @default(cuid())
  menuCategoryId        String
  adjustmentType        PriceAdjustmentType
  percentageValue       Float
  description           String?
  appliedAt             DateTime?
  appliedByEmployeeName String?
  businessId            String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt()
  menuCategory          BusinessMenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  business              Business             @relation(fields: [businessId], references: [id])

  @@index([menuCategoryId])
  @@index([businessId])
  @@map("business_menu_category_price_adjustments")
}

model BusinessProductGroup {
  id               String                                @id() @default(cuid())
  name             String
  description      String?
  businessId       String
  createdAt        DateTime                              @default(now())
  updatedAt        DateTime                              @updatedAt()
  business         Business                              @relation(fields: [businessId], references: [id])
  products         BusinessProduct[]
  priceAdjustments BusinessProductGroupPriceAdjustment[]

  @@index([businessId])
  @@map("business_product_groups")
}

model BusinessProductGroupPriceAdjustment {
  id                    String               @id() @default(cuid())
  productGroupId        String
  adjustmentType        PriceAdjustmentType
  percentageValue       Float
  description           String?
  appliedAt             DateTime?
  appliedByEmployeeName String?
  businessId            String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt()
  productGroup          BusinessProductGroup @relation(fields: [productGroupId], references: [id], onDelete: Cascade)
  business              Business             @relation(fields: [businessId], references: [id])

  @@index([productGroupId])
  @@index([businessId])
  @@map("business_product_group_price_adjustments")
}

model BusinessProduct {
  id                           String                         @id() @default(cuid())
  menuId                       String
  name                         String
  stockBatches                 BusinessProductStockBatch[]
  type                         BusinessProductType
  typeUnitConsumeMeasurement   String
  minimumStockAlert            Float
  tags                         String?
  nameLastModificationEmployee String?
  preparationDuration          Int
  urlImage                     String?                        @unique()
  imageId                      String?                        @unique()
  image                        BusinessFile?                  @relation(fields: [imageId], references: [id], onDelete: SetNull)
  businessId                   String
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt()
  productGroupId               String?
  productGroup                 BusinessProductGroup?          @relation(fields: [productGroupId], references: [id], onDelete: SetNull)
  menu                         BusinessMenu                   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  business                     Business                       @relation(fields: [businessId], references: [id])
  parentId                     String?
  parent                       BusinessProduct?               @relation("SubProducts", fields: [parentId], references: [id])
  children                     BusinessProduct[]              @relation("SubProducts")
  tempOrderLines               ClientTempOrderLine[]
  stockMovements               BusinessProductStockMovement[]

  @@index([menuId])
  @@index([businessId])
  @@index([name])
  @@index([productGroupId])
  @@index([imageId])
  @@map("business_products")
}

model BusinessProductStockBatch {
  id             String                         @id() @default(cuid())
  batchName      String?
  originalCount  Decimal                        @db.Decimal(10, 2)
  reservedCount  Decimal                        @default(0) @db.Decimal(10, 2)
  costPerUnit    Decimal?                       @db.Decimal(10, 4)
  purchaseDate   DateTime                       @default(now())
  expirationDate DateTime?
  supplierId     String
  supplier       BusinessSupplier               @relation(fields: [supplierId], references: [id])
  status         BatchStatus                    @default(AVAILABLE)
  businessId     String
  business       Business                       @relation(fields: [businessId], references: [id])
  productId      String
  product        BusinessProduct                @relation(fields: [productId], references: [id], onDelete: Cascade)
  stockMovements BusinessProductStockMovement[]
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt()

  @@unique([productId, batchName])
  @@index([businessId])
  @@index([productId])
  @@index([status])
  @@index([expirationDate])
  @@index([supplierId])
  @@map("business_products_stock_batches")
}

model BusinessProductStockMovement {
  id                  String                            @id() @default(cuid())
  type                StockMovementType
  quantity            Decimal                           @db.Decimal(10, 2)
  reason              String?
  batchId             String
  batch               BusinessProductStockBatch         @relation(fields: [batchId], references: [id])
  productId           String
  product             BusinessProduct                   @relation(fields: [productId], references: [id])
  orderId             String?
  groupStockMovmentId String
  groupStockMovment   BusinessProductStockGroupMovement @relation(fields: [groupStockMovmentId], references: [id], onDelete: Cascade)
  businessId          String
  business            Business                          @relation(fields: [businessId], references: [id])
  createdAt           DateTime                          @default(now())

  @@index([businessId])
  @@index([productId])
  @@index([batchId])
  @@index([type])
  @@index([createdAt])
  @@map("business_products_stock_movements")
}

model BusinessProductStockGroupMovement {
  id              String                                @id() @default(cuid())
  type            TypeBusinessProductStockGroupMovement
  batchesMovments BusinessProductStockMovement[]
  userId          String?
  employeeName    String?
  orderId         String?
  businessId      String
  business        Business                              @relation(fields: [businessId], references: [id])
  createdAt       DateTime                              @default(now())

  @@index([businessId])
  @@index([createdAt])
  @@map("business_products_stock_group_movements")
}

model BusinessSupplier {
  id           String                      @id() @default(cuid())
  name         String
  contactInfo  String?
  businessId   String
  business     Business                    @relation(fields: [businessId], references: [id])
  stockBatches BusinessProductStockBatch[]
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt()

  @@index([businessId])
  @@map("business_suppliers")
}

model BusinessEmployee {
  id                String                        @id() @default(cuid())
  name              String
  job               EmployeeType
  activated         Boolean
  businessId        String
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt()
  business          Business                      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  clockRecords      BusinessEmployeeClockRecord[]
  dailyCashBalances BusinessDailyCashBalance[]

  @@unique([businessId, name])
  @@index([businessId])
  @@map("business_employees")
}

model BusinessFile {
  id         String                        @id() @default(cuid())
  name       String                        @unique()
  path       String                        @unique()
  mimeType   FileType
  hash       String                        @unique()
  sizeBytes  Int
  businessId String
  business   Business                      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  products   BusinessProduct[]             @relation()
  suppliers  BusinessSupplierInformation[] @relation()
  createdAt  DateTime                      @default(now())
  updatedAt  DateTime                      @updatedAt()

  @@index([businessId])
  @@map("business_file")
}

model BusinessEmployeeClockRecord {
  id         String           @id() @default(cuid())
  employeeId String
  recordTime DateTime
  businessId String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt()
  employee   BusinessEmployee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  business   Business         @relation("BusinessToClockRecords", fields: [businessId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([businessId])
  @@index([recordTime])
  @@map("business_employees_clock_records")
}

model BusinessGeneralSalesReportAi {
  id         String   @id() @default(cuid())
  url        String   @unique()
  businessId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@map("business_general_sales_reports_ai")
}

model BusinessGeneralWarehouseReportAi {
  id         String   @id() @default(cuid())
  url        String   @unique()
  businessId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@map("business_general_warehouse_reports_ai")
}

model BusinessWarehouseReplenishmentReportAi {
  id         String   @id() @default(cuid())
  url        String   @unique()
  businessId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@map("business_warehouse_replenishment_reports_ai")
}

model BusinessPaymentGateway {
  id         String                 @id() @default(cuid())
  provider   ProviderPaymentGateway
  public_key String
  secret_key String
  businessId String
  business   Business               @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@map("business_client_payment")
}
