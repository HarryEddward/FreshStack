// This file is automatically generated by ZenStack CLI and should not be manually updated.
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum LicenseType {
  MONTHLY
  LIFETIME
}

enum LicensePlan {
  STANDARD
  PREMIUM
  ENTERPRISE
  CUSTOM
}

enum LicenseStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
  REFUNDED
}

enum TransactionStatus {
  SUCCESSFUL
  FAILED
  PENDING
}

enum TypeBusinessOrderUbication {
  PHONE
  STATIC
} 

enum PaymentMethod {
  DEBIT_CARD
  CREDIT_CARD
  CASH
  OTHER
}

enum FileType {
  WEBP
  PDF
}

enum PriceAdjustmentType {
  INCREASE
  DECREASE
}

enum EmployeeType {
  ALL
  WAITER
  CHEF
}

enum CESTTimeZone {
  EUROPE_AMSTERDAM
  EUROPE_ANDORRA
  EUROPE_BELGRADE
  EUROPE_BERLIN
  EUROPE_BRATISLAVA
  EUROPE_BRUSSELS
  EUROPE_BUDAPEST
  EUROPE_COPENHAGEN
  EUROPE_GIBRALTAR
  EUROPE_LISBON
  EUROPE_LJUBLJANA
  EUROPE_LUXEMBOURG
  EUROPE_MADRID
  EUROPE_MALTA
  EUROPE_MONACO
  EUROPE_OSLO
  EUROPE_PARIS
  EUROPE_PODGORICA
  EUROPE_PRAGUE
  EUROPE_ROME
  EUROPE_SAN_MARINO
  EUROPE_SARAJEVO
  EUROPE_SKOPJE
  EUROPE_STOCKHOLM
  EUROPE_TIRANE
  EUROPE_VADUZ
  EUROPE_VIENNA
  EUROPE_WARSAW
  EUROPE_ZAGREB
  EUROPE_ZURICH
  AFRICA_CEUTA
  AFRICA_TUNIS
  ARCTIC_LONGYEARBYEN
}


// Sistema de organización de almacén a través de FEFO (First Expires/First Out)
enum BatchStatus {
  AVAILABLE    // Disponible para uso
  RESERVED     // Reservado para órdenes
  EXPIRED      // Vencido
  CONSUMED     // Totalmente consumido
  DAMAGED      // Dañado
}

enum StockMovementType {
  PURCHASE     // Compra/entrada
  SALE         // Venta/salida
  ADJUSTMENT   // Ajuste de inventario
  EXPIRED      // Vencimiento
  DAMAGED      // Daño
  RESERVED     // Reserva
  UNRESERVED   // Liberación de reserva
  TRANSFER     // Transferencia entre productos
}


enum BusinessProductType {
  INTERNAL
  INDIRECT
  DIRECT
}

model Business {
  id                              String                                   @id() @default(cuid()) 
  legalName                       String                                   @length(max: 450)
  taxId                           String                                   @unique() @length(max: 450)
  phone                           String                                   @unique() @length(max: 450) @regex("^[\\w-.]+@[\\w-]+\\.[a-z]{2,}$")
  email                           String                                   @unique() @length(max: 450) @regex("^\\+?[0-9]{7,15}$")
  registeredAddress               String                                   @length(max: 450)
  countryOfIncorporation          String                                   @length(max: 450)
  legalForm                       String                                   @length(max: 450)
  legalRepresentative             Json
  createdAt                       DateTime                                 @default(now())
  updatedAt                       DateTime                                 @updatedAt()
  supportingDocuments             BusinessSupportingDocuments?
  supportingDocumentsAttached     BusinessSupportingDocumentAttached[]
  commercialRelationship          BusinessCommercialRelationship?
  compliance                      BusinessCompliance?
  configuration                     BusinessConfiguration?
  bankInformation                 BusinessBankInformation?
  paymentHistoryDetails           BusinessPaymentHistoryDetail[]
  paymentHistories                BusinessPaymentHistory[]
  licenses                        BusinessLicense[]
  payingCompany                   BusinessPayingCompany?
  orderUbications                 BusinessOrderUbication[]
  clientOrders                    ClientOrder[]
  suppliers                       BusinessSupplier[]
  supplierInformation             BusinessSupplierInformation[]
  menus                           BusinessMenu[]
  products                        BusinessProduct[]
  productStockBatches             BusinessProductStockBatch[]
  productStockMovments            BusinessProductStockMovement[]
  generalSalesReportsAi           BusinessGeneralSalesReportAi[]
  generalWarehouseReportsAi       BusinessGeneralWarehouseReportAi[]
  warehouseReplenishmentReportsAi BusinessWarehouseReplenishmentReportAi[]
  clientOrderProducts             ClientOrderProductLine[]
  clientOrderThermalPrinters      ClientOrderThermalPrinter[]
  clientOrderTickets              ClientOrderTicket[]
  clientOrderTransactions         ClientOrderTransaction[]
  menuCategories                  BusinessMenuCategory[]
  employees                       BusinessEmployee[]
  employeeClockRecords            BusinessEmployeeClockRecord[]            @relation("BusinessToClockRecords")
  productGroups                   BusinessProductGroup[]
  productGroupPriceAdjustments    BusinessProductGroupPriceAdjustment[]
  menuCategoryPriceAdjustments    BusinessMenuCategoryPriceAdjustment[]
  menuPriceAdjustment             BusinessMenuPriceAdjustment[]
  dailyCashBalances               BusinessDailyCashBalance[]
  users                           User[]                                   // Added relation to User
  clientTempOrders                ClientTempOrder[]                          // Added relation to ClientTempOrder
  files                            BusinessFile[]                          // Added relation to BusinessFile
  paymentGateway                  BusinessPaymentGateway[]
  productStockGroupMovement       BusinessProductStockGroupMovement[]
  
  @@allow('all', auth().businessId == this.id)
  @@map("businesses")
}


model User {
  id         String   @id @default(cuid())
  businessId String   // User is associated with a business
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@auth() // Designates this as the authentication model
}


model BusinessDailyCashBalance {
  id                  String           @id() @default(cuid())
  businessId          String          @length(max: 450)
  employeeId          String          @length(max: 450)
  balanceDate         DateTime         @db.Date()
  expectedCashAmount  Float            @default(0)
  expectedCardAmount  Float            @default(0)
  expectedOtherAmount Float            @default(0)
  totalExpectedAmount Float            @default(0)
  countedCashAmount   Float
  countedCardAmount   Float
  countedOtherAmount  Float
  totalCountedAmount  Float
  varianceCash        Float
  varianceCard        Float
  varianceOther       Float
  totalVariance       Float
  notes               String?         @length(max: 450)
  isBalanced          Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt()
  business            Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  employee            BusinessEmployee @relation(fields: [employeeId], references: [id])

  @@unique([businessId, balanceDate])
  @@index([businessId])
  @@index([employeeId])
  @@index([balanceDate])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_daily_cash_balances")
}

model BusinessSupportingDocuments {
  id                                 String   @id()
  serviceContract                    Boolean?
  issuedInvoice                      Boolean?
  thirdPartyPaymentAgreement         Boolean?
  ultimateBeneficialOwnerCertificate Boolean?
  businessLicense                    Boolean?
  createdAt                          DateTime @default(now())
  updatedAt                          DateTime @updatedAt()
  business                           Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@allow('all', auth().businessId == this.id)
  @@map("business_supporting_documents")
}

model BusinessSupportingDocumentAttached {
  id         String   @id() @default(cuid())
  url        String   @length(max: 450)
  businessId String   @length(max: 450)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_supporting_documents_attached")
}

model BusinessCommercialRelationship {
  id                          String                                           @id()
  type                        String                                          @length(max: 450)
  signedContract              Boolean?
  thirdPartyPaymentPermission Boolean?
  createdAt                   DateTime                                         @default(now())
  updatedAt                   DateTime                                         @updatedAt()
  business                    Business                                         @relation(fields: [id], references: [id], onDelete: Cascade)
  attachedDocuments           BusinessCommercialRelationshipDocumentAttached[]

  @@allow('all', auth().businessId == this.id)
  @@map("business_commercial_relationships")
}

model BusinessCommercialRelationshipDocumentAttached {
  id                       String                         @id() @default(cuid())
  url                      String                         @length(max: 450)
  commercialRelationshipId String                         @length(max: 450)
  createdAt                DateTime                       @default(now())
  updatedAt                DateTime                       @updatedAt()
  commercialRelationship   BusinessCommercialRelationship @relation(fields: [commercialRelationshipId], references: [id], onDelete: Cascade)

  @@index([commercialRelationshipId])
  @@allow('all', auth().businessId == this.commercialRelationshipId)
  @@map("business_commercial_relationship_documents_attached")
}

model BusinessCompliance {
  id                       String   @id()
  kycVerified              Boolean?
  amlApproved              Boolean?
  taxWithholdingApplicable Boolean?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt()
  business                 Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@allow('all', auth().businessId == this.id)
  @@map("business_compliance")
}

model BusinessConfiguration {
  id                 String   @id()
  wifi                Json?
  schedule           Json?
  timeZone           CESTTimeZone @default(EUROPE_MADRID)
  functionsActivated Json?
  apiKey             Json?
  affiliate           Boolean? @default(false)
  maxPhonesDevices   Int?     @default(30)
  displayUsername    String?  @length(max: 450)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()
  business           Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@allow('all', auth().businessId == this.id)
  @@map("business_configurations")
}

model BusinessBankInformation {
  id                  String   @id()
  bankName            String    @length(max: 450)  
  ibanOrAccountNumber String    @length(max: 450)
  swiftBic            String?   @length(max: 450)
  accountHolderName   String    @length(max: 450)
  bankAddress         String?   @length(max: 450)
  currency            String    @length(max: 450)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt()
  business            Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@allow('all', auth().businessId == this.id)
  @@map("business_bank_information")
}

model BusinessPaymentHistoryDetail {
  id             String                   @id() @default(cuid())
  description    String                   @length(max: 450)
  amount         Float
  currency       String                   @length(max: 450)
  taxesIncluded  Boolean?
  periodStart    DateTime?
  periodEnd      DateTime?
  businessId     String                   @length(max: 450)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt()
  business       Business                 @relation(fields: [businessId], references: [id])
  paymentHistory BusinessPaymentHistory[]

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_payment_history_details")
}

model BusinessPaymentHistory {
  id              String                       @id() @default(cuid())
  businessId      String                      @length(max: 450)
  paymentDetailId String                      @length(max: 450)
  amount          Float
  currency        String                      @length(max: 450)
  type            String                      @length(max: 450)
  status          String                      @length(max: 450)
  stripeInvoiceId String?                     @length(max: 450)
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt()
  business        Business                     @relation(fields: [businessId], references: [id])
  paymentDetail   BusinessPaymentHistoryDetail @relation(fields: [paymentDetailId], references: [id])

  @@unique([businessId, paymentDetailId, createdAt], map: "business_payment_history_unique_idx")
  @@index([businessId])
  @@index([paymentDetailId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_payment_history")
}

model BusinessLicense {
  id                    String        @id() @default(cuid())
  stripeCustomerId      String?       @length(max: 450)      
  stripeSubscriptionId  String?       @unique() @length(max: 450)
  stripePaymentIntentId String?       @unique() @length(max: 450)
  licenseType           LicenseType
  plan                  LicensePlan
  status                LicenseStatus
  startDate             DateTime
  endDate               DateTime?
  isPaid                Boolean       @default(false)
  lockinMonths          Int?
  businessId            String        @length(max: 450)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt()
  business              Business      @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@index([stripeSubscriptionId])
  @@index([stripePaymentIntentId])
  @@allow('all', true)
  @@map("business_licenses")
}

model BusinessPayingCompany {
  id        String   @id()
  legalName String    @length(max: 450)
  taxId     String    @unique() @length(max: 450)
  country   String    @length(max: 450)
  role      String    @length(max: 450)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  business  Business @relation(fields: [id], references: [id], onDelete: Cascade)

  @@allow('all', true)
  @@map("business_paying_companies")
}


model ClientOrder {
  id               String                     @id() @default(cuid())
  status           OrderStatus                @default(PENDING)
  informationNotes String?                    @length(max: 450)
  tableServed      String?                    @length(max: 450)
  employeeServed   String?                    @length(max: 450)
  refund           Boolean                    @default(false)
  businessId       String                     @length(max: 450)
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt()
  business         Business                   @relation(fields: [businessId], references: [id])
  products         ClientOrderProductLine[]
  thermalPrinter   ClientOrderThermalPrinter?
  ticket           ClientOrderTicket?
  transactions     ClientOrderTransaction[]

  @@index([businessId])
  @@index([status])
  @@allow('all', auth().businessId == this.businessId)
  @@map("client_orders")
}

// Este modelo conecta el Pedido con los Productos.
model ClientTempOrderLine {
  id                  String          @id() @default(cuid())
  quantity            Int
  priceAtTimeOfOrder  Float           // Price snapshot at order time
  orderId             String          @length(max: 450)
  productId           String          @length(max: 450) // One product per line
  order               ClientTempOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product             BusinessProduct @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
  @@allow('all', auth().businessId == this.order.businessId)
  @@map("client_temp_order_lines")
}


// Modelo ClientTempOrder ajustado
model ClientTempOrder {
  id            String                       @id() @default(cuid())
  businessId    String                        @length(max: 450)
  phoneId       String                       @unique() @length(max: 450) // One temp order per phone
  email         String?                      @length(max: 450) // Optional: Customer email for the order
  createdAt     DateTime                     @default(now())
  business      Business                     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  lines         ClientTempOrderLine[]
  
  businessOrderUbicationId String?                     @unique() // Optional: Link to a BusinessPhone
  businessOrderUbication BusinessOrderUbication?               @relation(fields: [businessOrderUbicationId], references: [id], onDelete: SetNull)

  @@index([businessId])
  @@index([createdAt])
  @@allow('all', auth().businessId == this.businessId)
  @@map("client_temp_orders")
}

model BusinessOrderUbication {
  id                String                      @id() @default(cuid())
  
  title             String                      @length(max: 450)
  position_x        Decimal
  position_y      Decimal
  isCalling         Boolean                     @default(false)
  type              TypeBusinessOrderUbication  @default(PHONE)

  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt()
  
  businessId        String                      @length(max: 450)
  business          Business                    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  clientTempOrderId String?                     @unique() @length(max: 450)
  clientTempOrder   ClientTempOrder?            @relation()


  @@index([businessId])
  @@index([isCalling])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_order_ubications")
}

model ClientOrderProductLine {
  id              String      @id() @default(cuid())
  orderId         String      @length(max: 450)
  productSnapshot Json
  quantity        Int
  subtotal        Float
  businessId      String      @length(max: 450)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt()
  order           ClientOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  business        Business    @relation(fields: [businessId], references: [id])

  @@index([orderId])
  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("client_order_product_lines")
}

model ClientOrderThermalPrinter {
  orderId    String      @id()
  printers   String[]
  businessId String       @length(max: 450)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  order      ClientOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  business   Business    @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("client_order_thermal_printers")
}

model ClientOrderTicket {
  orderId    String      @id()
  tickets    Json
  businessId String     @length(max: 450)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  order      ClientOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  business   Business    @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("client_order_tickets")
}

model ClientOrderTransaction {
  id                     String            @id() @default(cuid())
  orderId                String           @length(max: 450)
  externalTransactionId  String            @unique() @length(max: 450)
  transactionAmount      Float
  transactionCurrencyIso String             @length(max: 450)
  status                 TransactionStatus
  paymentMethod          PaymentMethod?
  businessId             String             @length(max: 450)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt()
  order                  ClientOrder       @relation(fields: [orderId], references: [id])
  business               Business          @relation(fields: [businessId], references: [id])

  @@index([orderId])
  @@index([businessId])
  @@index([status])
  @@allow('all', auth().businessId == this.businessId)
  @@map("client_order_transactions")
}

model BusinessSupplierInformation {
  id          String                    @id() @default(cuid())
  inUse       Boolean                   @default(true)
  title       String                    @length(max: 450)
  description String?                   @length(max: 450)
  schedule    Json?
  businessId  String                    @length(max: 450)
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt()
  business    Business                  @relation(fields: [businessId], references: [id])
  imageId     String?                   @unique() @length(max: 450)
  image       BusinessFile?             @relation(fields: [imageId], references: [id], onDelete: SetNull)

  @@index([businessId])
  @@index([imageId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_supplier_information")
}

model BusinessMenu {
  id                           String                        @id() @default(cuid())
  title                        String                         @length(max: 450)
  tags                         String?                        @length(max: 450)
  nameLastModificationEmployee String?                         @length(max: 450)
  vip                          Boolean                       @default(false)
  haveSchedule                 Boolean                       @default(false)
  schedule                     Json?
  businessId                   String                         @length(max: 450)
  categoryId                   String?                        @length(max: 450)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt()
  business                     Business                      @relation(fields: [businessId], references: [id])
  category                     BusinessMenuCategory?         @relation(fields: [categoryId], references: [id])
  products                     BusinessProduct[]
  priceAdjustments             BusinessMenuPriceAdjustment[]

  @@index([businessId])
  @@index([categoryId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_menus")
}

model BusinessMenuPriceAdjustment {
  id                    String              @id() @default(cuid())
  menuId                String              @length(max: 450)
  adjustmentType        PriceAdjustmentType
  percentageValue       Float
  description           String?             @length(max: 450)
  appliedAt             DateTime?
  appliedByEmployeeName String?             @length(max: 450)
  businessId            String              @length(max: 450)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt()
  menu                  BusinessMenu        @relation(fields: [menuId], references: [id], onDelete: Cascade)
  business              Business            @relation(fields: [businessId], references: [id])

  @@index([menuId])
  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_menu_price_adjustments")
}

model BusinessMenuCategory {
  id               String                                @id() @default(cuid())
  businessId       String                               @length(max: 450)
  createdAt        DateTime                              @default(now())
  updatedAt        DateTime                              @updatedAt()
  menus            BusinessMenu[]
  business         Business                              @relation(fields: [businessId], references: [id])
  priceAdjustments BusinessMenuCategoryPriceAdjustment[]

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_menu_categories")
}

model BusinessMenuCategoryPriceAdjustment {
  id                    String               @id() @default(cuid())
  menuCategoryId        String              @length(max: 450)
  adjustmentType        PriceAdjustmentType
  percentageValue       Float   
  description           String?             @length(max: 450)
  appliedAt             DateTime? 
  appliedByEmployeeName String?             @length(max: 450)
  businessId            String              @length(max: 450)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt()
  menuCategory          BusinessMenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  business              Business             @relation(fields: [businessId], references: [id])

  @@index([menuCategoryId])
  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_menu_category_price_adjustments")
}

model BusinessProductGroup {
  id               String                                @id() @default(cuid())
  name             String                               @length(max: 450)
  description      String?                              @length(max: 450)
  businessId       String                               @length(max: 450)
  createdAt        DateTime                              @default(now())
  updatedAt        DateTime                              @updatedAt()
  business         Business                              @relation(fields: [businessId], references: [id])
  products         BusinessProduct[]
  priceAdjustments BusinessProductGroupPriceAdjustment[]

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_product_groups")
}

model BusinessProductGroupPriceAdjustment {
  id                    String               @id() @default(cuid())
  productGroupId        String                @length(max: 450)
  adjustmentType        PriceAdjustmentType
  percentageValue       Float
  description           String?               @length(max: 450)
  appliedAt             DateTime?
  appliedByEmployeeName String?               @length(max: 450)
  businessId            String                @length(max: 450)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt()
  productGroup          BusinessProductGroup @relation(fields: [productGroupId], references: [id], onDelete: Cascade)
  business              Business             @relation(fields: [businessId], references: [id])

  @@index([productGroupId])
  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_product_group_price_adjustments")
}

model BusinessProduct {
  id                           String                @id() @default(cuid())
  menuId                       String               @length(max: 450)
  name                         String               @length(max: 450)

  // Relación con batches de stock
  // A la hora de buscar los lotes, se consultan en el lote especifico no dentro del mismo producto ya que almacena todos los lotes aplicados
  stockBatches                 BusinessProductStockBatch[]

  // Tipo de producto
  /**
  ** - Producto Interno:    Producto que no se expone al consumidor final, se usa para procesar productos que necesitan elaboración como los productos indirectos. (Ej.: Materias Primas: Harina)
  ** - Producto Indirecto:  Producto que necesita de los productos internos para operar y realizar la consumición, si se expone al consumidor final. (Ej.: Platos especiales: Arros Brut, Helados caseros: Helado de avellana)
  ** - Producto Directo:    Producto que opera directamente del stock independientemente aplicado directamente al consumidor final. (Ej.: Proveedores de bebidas de marcas especifcias: Acuarius)
  */
  type                          BusinessProductType // Se debe de especificarse formalmente: @default(INTERNAL)

  // Información de consumo (no stock actual)
  typeUnitConsumeMeasurement    String              @length(max: 450)
  minimumStockAlert               Float             @gte(0)                  // Alerta de stock mínimo es obligatorio y puede ser de difernetes medidas
  tags                          String?             @length(max: 450)
  nameLastModificationEmployee   String?               @length(max: 450)
  preparationDuration           Int                  // Se calcula en minutos

  urlImage                     String?               @unique() @length(max: 450)
  imageId                      String?               @unique() @length(max: 450)
  image                        BusinessFile?         @relation(fields: [imageId], references: [id], onDelete: SetNull)
  
  businessId                   String               @length(max: 450)
  
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt()
  
  productGroupId               String?              @length(max: 450)
  productGroup                 BusinessProductGroup? @relation(fields: [productGroupId], references: [id], onDelete: SetNull)
  
  menu                         BusinessMenu          @relation(fields: [menuId], references: [id], onDelete: Cascade)
  business                     Business              @relation(fields: [businessId], references: [id])
  
  parentId                     String?              @length(max: 450)
  parent                       BusinessProduct?      @relation("SubProducts", fields: [parentId], references: [id])
  children                     BusinessProduct[]     @relation("SubProducts")
  
  tempOrderLines               ClientTempOrderLine[]
  
  // Nuevas relaciones para trazabilidad
  stockMovements               BusinessProductStockMovement[]

  @@index([menuId])
  @@index([businessId])
  @@index([name])
  @@index([productGroupId])
  @@index([imageId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_products")
}

model BusinessProductStockBatch {
  id                           String                @id() @default(cuid())

  // Información del lote
  batchName                  String?                 @length(max: 450)               // Número de lote opcional
  
  // count                        Decimal               @db.Decimal(10, 2) // El conteo de productos se aplica en una lógica separada del DB, contando con los movimientos del stock
  originalCount                Decimal               @db.Decimal(10, 2) // Cantidad inicial
  reservedCount                Decimal               @default(0) @db.Decimal(10, 2) // Cantidad reservada
  
  // Información financiera
  costPerUnit                  Decimal?              @db.Decimal(10, 4)
  // totalCost                    Decimal?              @db.Decimal(10, 2) // El coste total se calcula con el los productos de entrada incial con el coste por unidad
  
  // Fechas importantes
  purchaseDate                 DateTime              @default(now())
  expirationDate               DateTime?
  
  // Proveedor
  // El proveedor es obligatorio para eivtar proveedores desconocidos, incluyend si el proveedor es directo al cliente se llama en el nombre del negocio a realizar el producto algo importante a mencionar. Por ejemplo en caso de hacer cosas caseras, se podria llamar: Local. Pero siempre un proveedor como interno o externo
  supplierId                   String               @length(max: 450)
  supplier                     BusinessSupplier     @relation(fields: [supplierId], references: [id])
  
  // Estado del batch
  status                       BatchStatus           @default(AVAILABLE)
  
  // Relaciones
  businessId                   String               @length(max: 450)
  business                     Business              @relation(fields: [businessId], references: [id])

  productId                    String               @length(max: 450)
  product                      BusinessProduct       @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Movimientos relacionados con este batch
  stockMovements               BusinessProductStockMovement[]

  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt()

  @@index([businessId])
  @@index([productId])
  @@index([status])
  @@index([expirationDate])
  @@index([supplierId])
  @@unique([productId, batchName]) // Evitar duplicados de lote por producto

  @@allow('all', auth().businessId == this.businessId)
  @@map("business_products_stock_batches")
}

// Tabla para rastrear todos los movimientos de stock
model BusinessProductStockMovement {
  id                           String                @id() @default(cuid())
  
  // Información del movimiento
  type                         StockMovementType
  quantity                     Decimal               @db.Decimal(10, 2)
  reason                       String?                @length(max: 450)
  
  // Referencia al batch afectado
  batchId                      String                @length(max: 450)
  batch                        BusinessProductStockBatch @relation(fields: [batchId], references: [id])
  
  // Información del producto
  productId                    String                 @length(max: 450)
  product                      BusinessProduct       @relation(fields: [productId], references: [id])
  
  // Referencia a orden si aplica
  orderId                      String?                @length(max: 450)
  
  // Se usa para poder ordenar los movimientos de forma unificada
  groupStockMovmentId          String
  groupStockMovment            BusinessProductStockGroupMovement @relation(fields: [groupStockMovmentId], references: [id], onDelete: Cascade)

  businessId                   String                 @length(max: 450)
  business                     Business              @relation(fields: [businessId], references: [id])
  
  createdAt                    DateTime              @default(now())

  @@index([businessId])
  @@index([productId])
  @@index([batchId])
  @@index([type])
  @@index([createdAt])

  @@allow('all', auth().businessId == this.businessId)
  @@map("business_products_stock_movements")
}

/*
Tabla para rastrear todos los grupos de movimientos de stock
tiene como proposito realizar undos de movimientos muchos mas limpios y faciles
de aplicar.
*/

enum TypeBusinessProductStockGroupMovement {
  CONSUMER
  WAREHOUSE
}

model BusinessProductStockGroupMovement {
  id                           String                @id() @default(cuid())

  // Necesitamos saber el tipo de lugar del movimiento que se ejecuto, si es del almacén o del cliente final.
  type                    TypeBusinessProductStockGroupMovement
  
  // Información sobre los movimientos hechos (incluyendo varios lotes que pueden ser difernetes)
  batchesMovments         BusinessProductStockMovement[]

  // Usuario que realizó el movimiento
  userId                       String?                @length(max: 450)
  employeeName                 String?                @length(max: 450)
  
  // Referencia a orden si aplica
  orderId                      String?                @length(max: 450)
  
  businessId                   String                 @length(max: 450)
  business                     Business              @relation(fields: [businessId], references: [id])
  
  createdAt                    DateTime              @default(now())

  @@index([businessId])
  @@index([createdAt])

  @@allow('all', auth().businessId == this.businessId)
  @@map("business_products_stock_group_movements")
}

// Modelo para proveedores
model BusinessSupplier {
  id                           String                @id() @default(cuid())
  name                         String               @length(max: 450)
  contactInfo                  String?              @length(max: 450)
  
  businessId                   String               @length(max: 450)
  business                     Business              @relation(fields: [businessId], references: [id])
  

  stockBatches                 BusinessProductStockBatch[]
  
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt()

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_suppliers")
}

model BusinessEmployee {
  id                String                        @id() @default(cuid()) // Sublicencia de la empresa
  name              String                        @length(max: 450)
  job               EmployeeType
  activated         Boolean
  businessId        String                        @length(max: 450)
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt()
  business          Business                      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  clockRecords      BusinessEmployeeClockRecord[]
  dailyCashBalances BusinessDailyCashBalance[]

  @@unique([businessId, name])
  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_employees")
}



model BusinessFile {
  id                String                        @id() @default(cuid())
  name              String                        @unique() @length(max: 450)
  path              String                        @unique() @length(max: 450)
  mimeType          FileType
  hash              String                        @unique() @length(max: 450)
  sizeBytes         Int
  businessId        String                        @length(max: 450)
  business          Business                      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  products          BusinessProduct[]             @relation()
  suppliers         BusinessSupplierInformation[] @relation()
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt()

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_file")

}

model BusinessEmployeeClockRecord {
  id         String           @id() @default(cuid())
  employeeId String           @length(max: 450)
  recordTime DateTime
  businessId String           @length(max: 450)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt()
  employee   BusinessEmployee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  business   Business         @relation("BusinessToClockRecords", fields: [businessId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([businessId])
  @@index([recordTime])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_employees_clock_records")
}

model BusinessGeneralSalesReportAi {
  id         String   @id() @default(cuid())
  url        String   @unique() @length(max: 450)
  businessId String   @length(max: 450)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_general_sales_reports_ai")
}

model BusinessGeneralWarehouseReportAi {
  id         String   @id() @default(cuid())
  url        String   @unique() @length(max: 450)
  businessId String   @length(max: 450)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_general_warehouse_reports_ai")
}

model BusinessWarehouseReplenishmentReportAi {
  id          String   @id() @default(cuid())
  url         String   @unique() @length(max: 450)
  businessId  String    @length(max: 450)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  business    Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map("business_warehouse_replenishment_reports_ai")
}


enum ProviderPaymentGateway {
  STRIPE
  SUMUP
}


model BusinessPaymentGateway {
  id          String            @id() @default(cuid())

  provider    ProviderPaymentGateway

  public_key  String            @length(max: 450)
  secret_key  String            @length(max: 450)

  businessId  String
  business    Business          @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@allow('all', auth().businessId == this.businessId)
  @@map('business_client_payment')
}