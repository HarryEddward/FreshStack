
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BusinessBankInformationScalarFieldEnum = {
  id: 'id',
  bankName: 'bankName',
  ibanOrAccountNumber: 'ibanOrAccountNumber',
  swiftBic: 'swiftBic',
  accountHolderName: 'accountHolderName',
  bankAddress: 'bankAddress',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessPaymentHistoryDetailScalarFieldEnum = {
  id: 'id',
  description: 'description',
  amount: 'amount',
  currency: 'currency',
  taxesIncluded: 'taxesIncluded',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessLicenseScalarFieldEnum = {
  id: 'id',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  licenseType: 'licenseType',
  plan: 'plan',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  isPaid: 'isPaid',
  lockinMonths: 'lockinMonths',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessPayingCompanyScalarFieldEnum = {
  id: 'id',
  legalName: 'legalName',
  taxId: 'taxId',
  country: 'country',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientOrderScalarFieldEnum = {
  id: 'id',
  status: 'status',
  informationNotes: 'informationNotes',
  tableServed: 'tableServed',
  employeeServed: 'employeeServed',
  refund: 'refund',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientOrderTicketScalarFieldEnum = {
  orderId: 'orderId',
  tickets: 'tickets',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientOrderTransactionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  externalTransactionId: 'externalTransactionId',
  transactionAmount: 'transactionAmount',
  transactionCurrencyIso: 'transactionCurrencyIso',
  status: 'status',
  paymentMethod: 'paymentMethod',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessSupplierPictureScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  url: 'url',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessMenuScalarFieldEnum = {
  id: 'id',
  title: 'title',
  tags: 'tags',
  nameLastModificationEmployee: 'nameLastModificationEmployee',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessMenuCategoryScalarFieldEnum = {
  id: 'id',
  menuId: 'menuId',
  vip: 'vip',
  haveSchedule: 'haveSchedule',
  schedule: 'schedule',
  nameLastModificationEmployee: 'nameLastModificationEmployee',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessProductScalarFieldEnum = {
  id: 'id',
  menuId: 'menuId',
  name: 'name',
  unityAmount: 'unityAmount',
  stockBatches: 'stockBatches',
  expirationDates: 'expirationDates',
  unityConsumeStock: 'unityConsumeStock',
  typeUnitConsumeMeasurement: 'typeUnitConsumeMeasurement',
  tags: 'tags',
  nameLastModificationEmployee: 'nameLastModificationEmployee',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessGeneralSalesReportAIScalarFieldEnum = {
  id: 'id',
  url: 'url',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessGeneralWarehouseReportAIScalarFieldEnum = {
  id: 'id',
  url: 'url',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessWarehouseReplenishmentReportAIScalarFieldEnum = {
  id: 'id',
  url: 'url',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_commercial_relationship_documents_attachedScalarFieldEnum = {
  id: 'id',
  url: 'url',
  commercialRelationshipId: 'commercialRelationshipId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_commercial_relationshipsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  signedContract: 'signedContract',
  thirdPartyPaymentPermission: 'thirdPartyPaymentPermission',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_complianceScalarFieldEnum = {
  id: 'id',
  kycVerified: 'kycVerified',
  amlApproved: 'amlApproved',
  taxWithholdingApplicable: 'taxWithholdingApplicable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_configurationsScalarFieldEnum = {
  id: 'id',
  wifi: 'wifi',
  schedule: 'schedule',
  functionsActivated: 'functionsActivated',
  apiKey: 'apiKey',
  affiliate: 'affiliate',
  maxPhonesDevices: 'maxPhonesDevices',
  displayUsername: 'displayUsername',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_employeesScalarFieldEnum = {
  id: 'id',
  nameEmployee: 'nameEmployee',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_employees_clock_recordsScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  recordTime: 'recordTime',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_payment_historyScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  paymentDetailId: 'paymentDetailId',
  amount: 'amount',
  currency: 'currency',
  type: 'type',
  status: 'status',
  stripeInvoiceId: 'stripeInvoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_phone_idsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_supplier_informationScalarFieldEnum = {
  id: 'id',
  inUse: 'inUse',
  title: 'title',
  description: 'description',
  schedule: 'schedule',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_supporting_documentsScalarFieldEnum = {
  id: 'id',
  serviceContract: 'serviceContract',
  issuedInvoice: 'issuedInvoice',
  thirdPartyPaymentAgreement: 'thirdPartyPaymentAgreement',
  ultimateBeneficialOwnerCertificate: 'ultimateBeneficialOwnerCertificate',
  businessLicense: 'businessLicense',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Business_supporting_documents_attachedScalarFieldEnum = {
  id: 'id',
  url: 'url',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessesScalarFieldEnum = {
  id: 'id',
  legalName: 'legalName',
  taxId: 'taxId',
  phone: 'phone',
  email: 'email',
  registeredAddress: 'registeredAddress',
  countryOfIncorporation: 'countryOfIncorporation',
  legalForm: 'legalForm',
  legalRepresentative: 'legalRepresentative',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Client_order_product_linesScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productSnapshot: 'productSnapshot',
  quantity: 'quantity',
  subtotal: 'subtotal',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Client_order_thermal_printersScalarFieldEnum = {
  orderId: 'orderId',
  printers: 'printers',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.LicenseType = exports.$Enums.LicenseType = {
  MONTHLY: 'MONTHLY',
  LIFETIME: 'LIFETIME'
};

exports.LicensePlan = exports.$Enums.LicensePlan = {
  STANDARD: 'STANDARD',
  PREMIUM: 'PREMIUM',
  ENTERPRISE: 'ENTERPRISE',
  CUSTOM: 'CUSTOM'
};

exports.LicenseStatus = exports.$Enums.LicenseStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  EXPIRED: 'EXPIRED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED',
  REFUNDED: 'REFUNDED'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  SUCCESSFUL: 'SUCCESSFUL',
  FAILED: 'FAILED',
  PENDING: 'PENDING'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  DEBIT_CARD: 'DEBIT_CARD',
  CREDIT_CARD: 'CREDIT_CARD',
  CASH: 'CASH',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  BusinessBankInformation: 'BusinessBankInformation',
  BusinessPaymentHistoryDetail: 'BusinessPaymentHistoryDetail',
  BusinessLicense: 'BusinessLicense',
  BusinessPayingCompany: 'BusinessPayingCompany',
  ClientOrder: 'ClientOrder',
  ClientOrderTicket: 'ClientOrderTicket',
  ClientOrderTransaction: 'ClientOrderTransaction',
  BusinessSupplierPicture: 'BusinessSupplierPicture',
  BusinessMenu: 'BusinessMenu',
  BusinessMenuCategory: 'BusinessMenuCategory',
  BusinessProduct: 'BusinessProduct',
  BusinessGeneralSalesReportAI: 'BusinessGeneralSalesReportAI',
  BusinessGeneralWarehouseReportAI: 'BusinessGeneralWarehouseReportAI',
  BusinessWarehouseReplenishmentReportAI: 'BusinessWarehouseReplenishmentReportAI',
  business_commercial_relationship_documents_attached: 'business_commercial_relationship_documents_attached',
  business_commercial_relationships: 'business_commercial_relationships',
  business_compliance: 'business_compliance',
  business_configurations: 'business_configurations',
  business_employees: 'business_employees',
  business_employees_clock_records: 'business_employees_clock_records',
  business_payment_history: 'business_payment_history',
  business_phone_ids: 'business_phone_ids',
  business_supplier_information: 'business_supplier_information',
  business_supporting_documents: 'business_supporting_documents',
  business_supporting_documents_attached: 'business_supporting_documents_attached',
  businesses: 'businesses',
  client_order_product_lines: 'client_order_product_lines',
  client_order_thermal_printers: 'client_order_thermal_printers'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
